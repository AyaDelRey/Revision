/*
Deployment script for DBrevision

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "DBrevision"
:setvar DefaultFilePrefix "DBrevision"
:setvar DefaultDataPath "C:\Users\m.chanu\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\m.chanu\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[Task]...';


GO
CREATE TABLE [dbo].[Task] (
    [TaskId]      UNIQUEIDENTIFIER NOT NULL,
    [Title]       NVARCHAR (255)   NOT NULL,
    [Description] NVARCHAR (MAX)   NULL,
    [IsCompleted] BIT              NOT NULL,
    [DueDate]     DATETIME         NULL,
    [CreatedDate] DATETIME         NOT NULL,
    [UserId]      UNIQUEIDENTIFIER NOT NULL,
    PRIMARY KEY CLUSTERED ([TaskId] ASC)
);


GO
PRINT N'Creating Table [dbo].[User]...';


GO
CREATE TABLE [dbo].[User] (
    [UserId]       UNIQUEIDENTIFIER NOT NULL,
    [UserName]     NVARCHAR (100)   NOT NULL,
    [Email]        NVARCHAR (100)   NOT NULL,
    [PasswordHash] NVARCHAR (255)   NOT NULL,
    [CreatedDate]  DATETIME         NOT NULL,
    PRIMARY KEY CLUSTERED ([UserId] ASC)
);


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Task]...';


GO
ALTER TABLE [dbo].[Task]
    ADD DEFAULT NEWID() FOR [TaskId];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Task]...';


GO
ALTER TABLE [dbo].[Task]
    ADD DEFAULT 0 FOR [IsCompleted];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Task]...';


GO
ALTER TABLE [dbo].[Task]
    ADD DEFAULT GETDATE() FOR [CreatedDate];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[User]...';


GO
ALTER TABLE [dbo].[User]
    ADD DEFAULT NEWID() FOR [UserId];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[User]...';


GO
ALTER TABLE [dbo].[User]
    ADD DEFAULT GETDATE() FOR [CreatedDate];


GO
PRINT N'Creating Foreign Key [dbo].[FK_Tasks_Users]...';


GO
ALTER TABLE [dbo].[Task]
    ADD CONSTRAINT [FK_Tasks_Users] FOREIGN KEY ([UserId]) REFERENCES [dbo].[User] ([UserId]);


GO
PRINT N'Creating Procedure [dbo].[SP_AddTask]...';


GO
CREATE PROCEDURE [dbo].[SP_AddTask]
    @Title NVARCHAR(255),
    @Description NVARCHAR(MAX),
    @IsCompleted BIT,
    @DueDate DATETIME,
    @UserId UNIQUEIDENTIFIER
AS
BEGIN
    -- Insérer une nouvelle tâche
    INSERT INTO dbo.Task (TaskId, Title, Description, IsCompleted, DueDate, CreatedDate, UserId)
    VALUES (NEWID(), @Title, @Description, @IsCompleted, @DueDate, GETDATE(), @UserId);
END
GO
PRINT N'Creating Procedure [dbo].[SP_AddUser]...';


GO
CREATE PROCEDURE [dbo].[SP_AddUser]
    @UserName NVARCHAR(100),
    @Email NVARCHAR(100),
    @Password NVARCHAR(255)
AS
BEGIN
   
    INSERT INTO dbo.[User] (UserId, UserName, Email, PasswordHash, CreatedDate)
    VALUES (NEWID(), @UserName, @Email, HASHBYTES('SHA2_256', @Password), GETDATE());
END
GO
PRINT N'Creating Procedure [dbo].[SP_DeleteTask]...';


GO
CREATE PROCEDURE [dbo].[SP_DeleteTask]
    @TaskId UNIQUEIDENTIFIER
AS
BEGIN
    -- Supprimer une tâche par son TaskId
    DELETE FROM dbo.Task
    WHERE TaskId = @TaskId;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetAllUsers]...';


GO
CREATE PROCEDURE [dbo].[SP_GetAllUsers]
AS
BEGIN
    -- Sélectionner tous les utilisateurs
    SELECT UserId, UserName, Email, CreatedDate
    FROM dbo.[User];
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetTaskByUserId]...';


GO
CREATE PROCEDURE [dbo].[SP_GetTaskByUserId]
    @UserId UNIQUEIDENTIFIER
AS
BEGIN
    -- Sélectionner toutes les tâches d'un utilisateur
    SELECT TaskId, Title, Description, IsCompleted, DueDate, CreatedDate
    FROM dbo.Task
    WHERE UserId = @UserId
    ORDER BY CreatedDate DESC;
END
GO
PRINT N'Creating Procedure [dbo].[SP_GetUserById]...';


GO
CREATE PROCEDURE [dbo].[SP_GetUserById]
    @Title NVARCHAR(255),
    @Description NVARCHAR(MAX),
    @IsCompleted BIT,
    @DueDate DATETIME,
    @UserId UNIQUEIDENTIFIER
AS
BEGIN
    -- Insérer une nouvelle tâche
    INSERT INTO dbo.Task (TaskId, Title, Description, IsCompleted, DueDate, CreatedDate, UserId)
    VALUES (NEWID(), @Title, @Description, @IsCompleted, @DueDate, GETDATE(), @UserId);
END
GO
PRINT N'Creating Procedure [dbo].[SP_MarkTaskAsCompleted]...';


GO
CREATE PROCEDURE [dbo].[SP_MarkTaskAsCompleted]
    @TaskId UNIQUEIDENTIFIER
AS
BEGIN
    -- Mettre à jour la tâche pour la marquer comme terminée
    UPDATE dbo.Task
    SET IsCompleted = 1 -- Marquer la tâche comme terminée
    WHERE TaskId = @TaskId;
END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

-- Insérer des utilisateurs dans dbo.Users
INSERT INTO dbo.[Users] (UserId, UserName, Email, PasswordHash, CreatedDate)
VALUES 
    (NEWID(), 'JohnDoe', 'john.doe@example.com', HASHBYTES('SHA2_256', 'password123'), GETDATE()),
    (NEWID(), 'JaneDoe', 'jane.doe@example.com', HASHBYTES('SHA2_256', 'password456'), GETDATE()),
    (NEWID(), 'AdminUser', 'admin@example.com', HASHBYTES('SHA2_256', 'adminpassword'), GETDATE());

-- Récupérer les UserId générés pour utilisation dans les tâches
DECLARE @UserId1 UNIQUEIDENTIFIER = (SELECT UserId FROM dbo.[Users] WHERE UserName = 'JohnDoe');
DECLARE @UserId2 UNIQUEIDENTIFIER = (SELECT UserId FROM dbo.[Users] WHERE UserName = 'JaneDoe');
DECLARE @UserId3 UNIQUEIDENTIFIER = (SELECT UserId FROM dbo.[Users] WHERE UserName = 'AdminUser');

-- Insérer des tâches associées à chaque utilisateur
INSERT INTO dbo.Tasks (TaskId, Title, Description, IsCompleted, DueDate, CreatedDate, UserId)
VALUES
    (NEWID(), 'Acheter du lait', 'Aller au supermarché pour acheter du lait.', 0, DATEADD(DAY, 3, GETDATE()), GETDATE(), @UserId1),
    (NEWID(), 'Finir le projet', 'Compléter le projet To-Do List.', 0, DATEADD(DAY, 7, GETDATE()), GETDATE(), @UserId1),
    (NEWID(), 'Révision des notes', 'Vérifier les notes du dernier trimestre.', 1, NULL, GETDATE(), @UserId2),
    (NEWID(), 'Configurer le serveur', 'Configurer le serveur pour le nouveau client.', 0, DATEADD(DAY, 5, GETDATE()), GETDATE(), @UserId3),
    (NEWID(), 'Rédiger un rapport', 'Rédiger un rapport pour la réunion trimestrielle.', 0, DATEADD(DAY, 10, GETDATE()), GETDATE(), @UserId3);

-- Vérification des données insérées
SELECT * FROM dbo.[Users];
SELECT * FROM dbo.Tasks;

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
